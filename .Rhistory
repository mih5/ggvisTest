diffs = matrix(NA, nrow=J, ncol=K)
for (j in 1:J) for (k in 1:K) diffs[j,k] = diffMeans(value_matrix[subclass==j,k], group_indicators[subclass==j])
weights = table(subclass)/n
overall.diffs = weights%*%diffs
std.diffs = overall.diffs/denominators
apply(value_matrix, MARGIN=2, welchTStat, group_indicators=group_indicators)+std.diffs
}
}
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass = subclasses[4,])
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[2,])
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
input_slider
?input_slider
slider <- input_slider(2, 10, step = 1)
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[slider,])
data.frame(t_statistics_subclasses, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
t_statistics_subclasses
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
welchTStats <- function(value_matrix, group_indicators, subclass = NULL) {
if(is.null(subclass)){
apply(value_matrix, MARGIN=2, welchTStat, group_indicators=group_indicators)
}
else{
J = length(table(subclass))
K = dim(value_matrix)[2]
n = dim(value_matrix)[1]
denominators = apply(value_matrix, MARGIN = 2, welchStandardError, group_indicators = group_indicators)
diffs = matrix(NA, nrow=J, ncol=K)
for (j in 1:J) for (k in 1:K) diffs[j,k] = diffMeans(value_matrix[subclass==j,k], group_indicators[subclass==j])
weights = table(subclass)/n
overall.diffs = weights%*%diffs
std.diffs = overall.diffs/denominators
std.diffs
}
}
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
save(data.casted.dummies, subclasses, file = "propensitydata.R")
write.table(data.casted.dummies, file = "data.casted.dummies")
write.table(subclasses, file = "subclasses")
data.casted.dummies <- read.table("data.casted.dummies")
setwd("~/GitHub/ggvisTest/propensityscores")
data.casted.dummies <- read.table("data.casted.dummies")
subclasses <- read.table("subclasses")
require(shiny)
require(ggvis)
data.casted.dummies <- read.table("data.casted.dummies")
subclasses <- read.table("subclasses")
shinyUI(
fluidPage(
titlePanel("Exploring NJ/PA Minimum Wage Data"),
sidebarLayout(
sidebarPanel(
),
mainPanel(
uiOutput("ggvis_ui"),
ggvisOutput("ggvis")
)
)
)
)
setwd("~/GitHub/ggvisTest")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
data.frame(t_statistics_subclasses, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(ggplot2)
require(reshape2)
require(dplyr)
#ADD ID COLUMN TO DATA
data <- cbind(id = seq(1:nrow(data)), data)
observations <- dim(data)[1]
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
#I wish to know about the measured variables EmploymentPost, EmploymentPre, and Wage broken up by state and restaurant
data.melted.temp <- melt(data, id.vars = c("id","NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted.temp)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted.temp[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(id = data.melted.temp$id, state = ifelse(data.melted.temp$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted.temp[,c("variable", "value")])
head(data.melted)
data.casted <- dcast(data.melted, id + state + restaurant ~ variable)
########################
# EXPLORATORY ANALYSIS #
########################
variableSelect <- input_select(choices=c("# of people employed" = "EmploymentPre", "# of people employed" = "EmploymentPost", "# of people employed" = "WagePre"))
#############################
# EXAMINE COVARIATE BALANCE #
#############################
head(data.casted)
summary(data.casted$restaurant)
#create dummy variables
data.casted.dummies <- mutate(data.casted, Burger_King = ifelse(restaurant == "Burger King", 1, 0),
KFC = ifelse(restaurant == "KFC", 1, 0),
Roys = ifelse(restaurant == "Roys", 1, 0),
Wendys = ifelse(restaurant == "Wendys", 1, 0))
head(data.casted.dummies)
#calculate t-statistics
#uses strange "axis_props" convention
#also has specification of properties similar to svg css - dx, dy, etc.
#geom abline doesn't exist
t_statistics <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
data.frame(t_statistics, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
##################
# "DESIGN PHASE" #
##################
#This section is known as the "design phase"
#because we attempt to balance the covariates
#between the treatment and control groups,
#much like we would in an actual experiment.
## Interaction terms and quadratics
fullmodel <- glm(state ~ .^2 + I(WagePre^2) + I(EmploymentPre^2),data.casted.dummies[,-1],family="binomial")
ps.model = step(fullmodel,
scope = list(lower = ~EmploymentPre+WagePre+Burger_King+KFC+Roys, upper = ~.))
#stepwise regression is generally bad practice, but there we're not doing inference on propensity score, just using it to balance covariates
ps = predict(ps.model, type="response")
#gets the propensity scores for each unit, based on the model
#find subclasses for 2-10 subclasses
subclasses <- matrix(nrow = 9, ncol = observations)
for(i in 2:10){
subclass.breaks <- quantile(ps, c(seq(1/i,1-1/i,1/i)) )
subclass <- rep(length(subclass.breaks)+1, length(ps))
for (j in length(subclass.breaks):1){
subclass[ps <= subclass.breaks[j]] = j
}
subclasses[i-1,] <- subclass
}
head(subclasses)
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
data.frame(t_statistics_subclasses, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
names(t_statistics)
runApp("propensityscores")
runApp("propensityscores")
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(ggplot2)
require(reshape2)
require(dplyr)
#ADD ID COLUMN TO DATA
data <- cbind(id = seq(1:nrow(data)), data)
observations <- dim(data)[1]
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
#I wish to know about the measured variables EmploymentPost, EmploymentPre, and Wage broken up by state and restaurant
data.melted.temp <- melt(data, id.vars = c("id","NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted.temp)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted.temp[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(id = data.melted.temp$id, state = ifelse(data.melted.temp$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted.temp[,c("variable", "value")])
head(data.melted)
data.casted <- dcast(data.melted, id + state + restaurant ~ variable)
########################
# EXPLORATORY ANALYSIS #
########################
variableSelect <- input_select(choices=c("# of people employed" = "EmploymentPre", "# of people employed" = "EmploymentPost", "# of people employed" = "WagePre"))
#############################
# EXAMINE COVARIATE BALANCE #
#############################
head(data.casted)
summary(data.casted$restaurant)
#create dummy variables
data.casted.dummies <- mutate(data.casted, Burger_King = ifelse(restaurant == "Burger King", 1, 0),
KFC = ifelse(restaurant == "KFC", 1, 0),
Roys = ifelse(restaurant == "Roys", 1, 0),
Wendys = ifelse(restaurant == "Wendys", 1, 0))
head(data.casted.dummies)
#calculate t-statistics
#uses strange "axis_props" convention
#also has specification of properties similar to svg css - dx, dy, etc.
#geom abline doesn't exist
t_statistics <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
data.frame(t_statistics, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
##################
# "DESIGN PHASE" #
##################
#This section is known as the "design phase"
#because we attempt to balance the covariates
#between the treatment and control groups,
#much like we would in an actual experiment.
## Interaction terms and quadratics
fullmodel <- glm(state ~ .^2 + I(WagePre^2) + I(EmploymentPre^2),data.casted.dummies[,-1],family="binomial")
ps.model = step(fullmodel,
scope = list(lower = ~EmploymentPre+WagePre+Burger_King+KFC+Roys, upper = ~.))
#stepwise regression is generally bad practice, but there we're not doing inference on propensity score, just using it to balance covariates
ps = predict(ps.model, type="response")
#gets the propensity scores for each unit, based on the model
#find subclasses for 2-10 subclasses
subclasses <- matrix(nrow = 9, ncol = observations)
for(i in 2:10){
subclass.breaks <- quantile(ps, c(seq(1/i,1-1/i,1/i)) )
subclass <- rep(length(subclass.breaks)+1, length(ps))
for (j in length(subclass.breaks):1){
subclass[ps <= subclass.breaks[j]] = j
}
subclasses[i-1,] <- subclass
}
head(subclasses)
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
data.frame(t_statistics_subclasses, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
head(data.frame(t_statistics_subclasses, covariates = names(t_statistics)))
head(tstats)
head(t_statistics)
data.frame(t_statistics, covariates = names(t_statistics))
cbind(t_statistics_subclasses, covariates = names(t_statistics))
t_statistics_subclasses
t(t_statistics_subclasses)
data.frame(t_statistics_subclasses=t(t_statistics_subclasses_, covariates = names(t_statistics))
)
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means", values = -3:3
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means", values = -3:3,
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means", values = seq(-3,3,.5),
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
values = seq(-3,3,by=.5),
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
#values = seq(-3,3,by=.5),
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
?add_axis
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
#overrides scale limits
scale_numeric("x", domain = c(-3, 3))
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
data.frame(t_statistics_subclasses=t(t_statistics_subclasses), covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics_subclasses, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
#overrides scale limits
scale_numeric("x", domain = c(-3, 3)) %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
?sliderInput
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
runApp("propensityscores")
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[4,])
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[2,])
runApp("propensityscores")
head(data.casted.dummies)
source("~/GitHub/ggvisTest/utility.R")
data.casted.dummies <- read.table("data.casted.dummies")
subclasses <- read.table("subclasses")
setwd("~/GitHub/ggvisTest/propensityscores")
source("~/GitHub/ggvisTest/utility.R")
data.casted.dummies <- read.table("data.casted.dummies")
subclasses <- read.table("subclasses")
source("~/GitHub/ggvisTest/utility.R")
data.casted.dummies <- read.table("data.casted.dummies")
subclasses <- read.table("subclasses")
head(data.casted.dummies)
t_statistics <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
t_statistics_subclasses <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[2,])
data <- data.frame(tstats = t(t_statistics_subclasses), covariates = names(t_statistics))
names(data) <- c("tstats","covariates")
print(data)
head(subclasses)
?colnames
###########################
# TESTING GGVIS OUT USING #
# MINIMUM WAGE DATA       #
###########################
#SOURCE UTILITY FUNCTIONS
source("~/GitHub/ggvisTest/utility.R")
#READ-IN DATA
data <- read.csv("~/GitHub/ggvisTest/Minimum Wage - Sheet1.csv")
#IMPORT GGVIS
require(ggvis)
require(ggplot2)
require(reshape2)
require(dplyr)
#ADD ID COLUMN TO DATA
data <- cbind(id = seq(1:nrow(data)), data)
observations <- dim(data)[1]
#DESCRIPTION OF RAW DATA
# NJ.PA, indicator for whether or not restaurant is in NJ
# EmploymentPost, EmploymentPre, how many people employed at restaurant at beginning and end of study period
# WagePre, wage before
# Burger King, KFC, Roys, Wendys, type of restaurant
#TIDY THE DATA
#I wish to know about the measured variables EmploymentPost, EmploymentPre, and Wage broken up by state and restaurant
data.melted.temp <- melt(data, id.vars = c("id","NJ.PA","BurgerKing","KFC","Roys","Wendys"))
head(data.melted.temp)
#merge restaurant indicators into restaurant variable
restaurantPicker <- function(x) c("Burger King", "KFC", "Roys", "Wendys")[x%*%c(1,2,3,4)]
restaurant <- apply(data.melted.temp[,c("BurgerKing", "KFC", "Roys", "Wendys")], MARGIN =1, restaurantPicker)
data.melted <- cbind(id = data.melted.temp$id, state = ifelse(data.melted.temp$NJ.PA==1, "New Jersey", "Pennsylvania"), restaurant, data.melted.temp[,c("variable", "value")])
head(data.melted)
data.casted <- dcast(data.melted, id + state + restaurant ~ variable)
########################
# EXPLORATORY ANALYSIS #
########################
variableSelect <- input_select(choices=c("# of people employed" = "EmploymentPre", "# of people employed" = "EmploymentPost", "# of people employed" = "WagePre"))
#############################
# EXAMINE COVARIATE BALANCE #
#############################
head(data.casted)
summary(data.casted$restaurant)
#create dummy variables
data.casted.dummies <- mutate(data.casted, Burger_King = ifelse(restaurant == "Burger King", 1, 0),
KFC = ifelse(restaurant == "KFC", 1, 0),
Roys = ifelse(restaurant == "Roys", 1, 0),
Wendys = ifelse(restaurant == "Wendys", 1, 0))
head(data.casted.dummies)
#calculate t-statistics
#uses strange "axis_props" convention
#also has specification of properties similar to svg css - dx, dy, etc.
#geom abline doesn't exist
t_statistics <- welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
data.frame(t_statistics, covariates = names(t_statistics)) %>%
ggvis(x = ~t_statistics, y = ~covariates) %>%
group_by(covariates) %>% layer_points() %>%
add_axis("y", title = "Covariates",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=-30))) %>%
add_axis("x", title = "Standardized Difference in Covariate Means",
properties = axis_props(labels = list(fontSize=14),
title = list(fontSize=14, dy=30)))
##################
# "DESIGN PHASE" #
##################
#This section is known as the "design phase"
#because we attempt to balance the covariates
#between the treatment and control groups,
#much like we would in an actual experiment.
## Interaction terms and quadratics
fullmodel <- glm(state ~ .^2 + I(WagePre^2) + I(EmploymentPre^2),data.casted.dummies[,-1],family="binomial")
ps.model = step(fullmodel,
scope = list(lower = ~EmploymentPre+WagePre+Burger_King+KFC+Roys, upper = ~.))
#stepwise regression is generally bad practice, but there we're not doing inference on propensity score, just using it to balance covariates
ps = predict(ps.model, type="response")
#gets the propensity scores for each unit, based on the model
#find subclasses for 2-10 subclasses
subclasses <- matrix(nrow = 9, ncol = observations)
for(i in 2:10){
subclass.breaks <- quantile(ps, c(seq(1/i,1-1/i,1/i)) )
subclass <- rep(length(subclass.breaks)+1, length(ps))
for (j in length(subclass.breaks):1){
subclass[ps <= subclass.breaks[j]] = j
}
subclasses[i-1,] <- subclass
}
head(subclasses)
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
source("~/GitHub/ggvisTest/utility.R")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
?data.frame
?as.matrix
source("~/GitHub/ggvisTest/utility.R")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
source("~/GitHub/ggvisTest/utility.R")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
source("~/GitHub/ggvisTest/utility.R")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey")
source("~/GitHub/ggvisTest/utility.R")
welchTStats(data.casted.dummies[,c("EmploymentPre", "WagePre","Burger_King", "KFC", "Roys", "Wendys")], data.casted.dummies$state=="New Jersey", subclass=subclasses[2,])
runApp("propensityscores")
setwd("~/GitHub/ggvisTest")
setwd("~/GitHub/ggvisTest")
runApp("propensityscores")
runApp("propensityscores")
